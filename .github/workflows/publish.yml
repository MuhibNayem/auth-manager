name: Publish to PyPI and Create Release on Github

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  pypi-publish:
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/authy_package/
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - -y

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Poetry configuration
        run: poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --sync --no-interaction

      - name: Determine version bump
        id: version_bump
        run: |
          # Check the commit messages for tags
          if git log -1 --pretty=%B | grep -q '\[major\]'; then
            version=$(poetry version major -s)
          elif git log -1 --pretty=%B | grep -q '\[minor\]'; then
            version=$(poetry version minor -s)
          else
            version=$(poetry version patch -s)
          fi
          echo "version=$version" >> $GITHUB_ENV

      - name: Update pyproject.toml with new version
        run: |
          poetry version ${{ env.version }}

      - name: Commit version bump
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add pyproject.toml
          git commit -m "Bump version to v${{ env.version }}"
          git push origin main

      - name: Build package
        run: poetry build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.version }}"
          name: "Release v${{ env.version }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push new version tag
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git tag "v${{ env.version }}"
          git push origin "v${{ env.version }}"
